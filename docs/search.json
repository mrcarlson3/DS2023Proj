[
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "2  Exploratory Data Analysis",
    "section": "",
    "text": "2.1 Important Variables within this Dataset",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#each-position-exerts-different-levels-of-player-loads-within-practices-and-games-how-do-we-ensure-that-each-position-is-getting-their-optimal-training-and-recovery-in-order-to-perform-best-in-games-and-prevent-injury",
    "href": "eda.html#each-position-exerts-different-levels-of-player-loads-within-practices-and-games-how-do-we-ensure-that-each-position-is-getting-their-optimal-training-and-recovery-in-order-to-perform-best-in-games-and-prevent-injury",
    "title": "3  Group EDA",
    "section": "",
    "text": "3.1.1 Important Variables within this Dataset\n\nTotal Player Load: Total physical effort during a session. This is important for our analysis to see how much work the athlete is doing overall. Player Load Per Minute: Effort per minute (intensity). This is important for our analysis to see the intensity/effort players are putting in. Higher pl per minute means they are most likely sprinting/exerting lots of energy which may take longer recovery. Explosive Efforts: Number of high-intensity movements. This is important because high intensity movements can cause strain on muscles leading to potential injuries. Session Total Jump: Total jumps in a session. This is important because positions that jump a lot may need more recovery due to the strain this puts on tendons. Especially since jumps are very frequent in basketball. Session Jumps Per Minute: Jumps per minute (jump intensity). This can identify positions that may be at risk for knee injury if they have a very high rate of jumps per minutes. Total IMA: Total number of movements (all intensities). This is important to analyze all movement and not just high intensity movement. IMA/Min: Number of movements per minute. This is important to track endurance by position. Position: This is important for our analysis to compare all of our variables against position.\n\n\n\n3.1.2 Cleaning the data\n\n# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport scipy as sp\n\n\n# load data\nc1 = pd.read_csv('catapult season 1.csv')\nc2 = pd.read_csv('catapult season 2.csv')\n# merge the two seasons using concatonate ignoring their individual indexes\ndf = pd.concat([c1, c2], ignore_index=True)\n\n\n#check for duplicates\nduplicates = df.duplicated()\nprint(f\"Number of duplicates: {duplicates.sum()}\")\n#drop duplicates\ndf = df.drop_duplicates()\n#check for missing values\n\n#correct data types\nmissing_values = df.isnull().sum()\nprint(f\"Missing values: {missing_values}\")\n#drop missing values\ndf = df.dropna()\n#check data types\n\nNumber of duplicates: 0\nMissing values: Date                                0\nAbout                               0\nPosition                            0\nPeriod Number                       0\nPeriod                              0\nTotal Acceleration Efforts          0\nTotal Player Load                   0\nPlayer Load Per Minute              0\nIMA Accel Low                       0\nIMA Decel Low                       0\nIMA CoD Left Low                    0\nIMA CoD Right Low                   0\nIMA Accel Medium                    0\nIMA Decel Medium                    0\nIMA CoD Left Medium                 0\nIMA CoD Right Medium                0\nIMA Accel High                      0\nIMA Decel High                      0\nIMA Accel Total                     0\nIMA Decel Total                     0\nIMA CoD Left High                   0\nIMA CoD Right High                  0\nIMA Jump Count Low Band             0\nIMA Jump Count Med Band             0\nIMA Jump Count High Band            0\nExplosive Efforts                   0\nSession Total Jumps             26207\nSession Accel Low               26207\nSession Decel Low               26207\nSession CoD Left Low            26207\nSession CoD Right Low           26207\nSession Accel Med               26207\nSession Decel Medium            26207\nSession CoD Left Medium         26207\nSession CoD Right Medium        26207\nSession IMA Accel High          26207\nSession Decel High              26207\nSession CoD Left High           26207\nSession CoD Right High          26207\nSession IMA Accel Total         26207\nSession IMA Decel Total         26207\nSession Jump Count Low Band     26207\nSession Jump Count Med Band     26207\nSession Jump Count High Band    26207\nSession Total Jump              26207\nSession Jumps Per Minute        26207\nTotal CoD Left                  26207\nTotal CoD Right                 26207\nTotal High IMA                  26207\nTotal IMA                       26207\nIMA/Min                         28531\nevent-uuid                          0\ngroup-uuid                          0\ndtype: int64\n\n\n\n\n3.1.3 Descriptive Statistics & Distributions\n\nProvide summaries of important variables Use visualizations to explore distributions.\n\n\ndf['IMA CoD Low'] = df['IMA CoD Left Low'] + df['IMA CoD Right Low']\ndf['IMA CoD High'] = df['IMA CoD Left High'] + df['IMA CoD Right High']\ndf['IMA CoD Medium'] = df['IMA CoD Left Medium'] + df['IMA CoD Right Medium']\n#Generate summary statistics (mean, median, standard deviation, min/max, quartiles) for numerical variables\nnumeric = df.select_dtypes(include=[np.number])\nnumeric = numeric.drop(columns=['Period Number'])\nnumeric = numeric.dropna()\n\n# Create a new dataframe to store summary statistics\nsummary = pd.DataFrame()\n\n# Calculate summary statistics for each numeric column and add to the dataframe\nfor each in numeric.columns:\n    stats = numeric[each].describe()\n    summary[each] = stats\n\nsummary\n\n\n\n\n\n\n\n\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\nIMA Decel Medium\nIMA CoD Left Medium\n...\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nIMA CoD Low\nIMA CoD High\nIMA CoD Medium\n\n\n\n\ncount\n911.0\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n...\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n\n\nmean\n0.0\n148.872053\n5.655873\n14.117453\n29.589462\n37.023052\n40.778266\n3.543359\n8.064764\n7.373216\n...\n114.470911\n1.386937\n229.734358\n255.703622\n77.913282\n824.243688\n47.205060\n77.801317\n5.030735\n15.875960\n\n\nstd\n0.0\n86.035006\n1.713292\n12.664324\n23.690552\n34.791917\n36.251642\n4.476561\n8.909014\n9.734899\n...\n50.033823\n0.568696\n101.473635\n105.650637\n34.769415\n317.066287\n52.545666\n70.203308\n8.258671\n19.236498\n\n\nmin\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n0.0\n102.256000\n4.400000\n6.000000\n14.000000\n17.000000\n20.000000\n1.000000\n2.000000\n2.000000\n...\n79.500000\n0.970000\n167.000000\n188.000000\n54.000000\n621.000000\n21.085000\n38.000000\n1.000000\n5.000000\n\n\n50%\n0.0\n143.542000\n5.400000\n11.000000\n25.000000\n30.000000\n34.000000\n2.000000\n6.000000\n5.000000\n...\n108.000000\n1.320000\n237.000000\n267.000000\n78.000000\n862.000000\n31.370000\n65.000000\n3.000000\n11.000000\n\n\n75%\n0.0\n190.236500\n6.800000\n18.000000\n39.000000\n44.000000\n51.000000\n5.000000\n10.000000\n9.000000\n...\n141.500000\n1.750000\n295.000000\n329.000000\n101.000000\n1034.500000\n42.675000\n94.000000\n5.000000\n19.000000\n\n\nmax\n0.0\n534.156000\n12.700000\n110.000000\n223.000000\n252.000000\n302.000000\n43.000000\n65.000000\n70.000000\n...\n329.000000\n4.750000\n549.000000\n603.000000\n202.000000\n1857.000000\n310.430000\n545.000000\n61.000000\n129.000000\n\n\n\n\n8 rows × 49 columns\n\n\n\n\n#Create visualizations such as histograms, boxplots, or density plots to explore the distribution of key numerical variables.\n\n#data frame with key variables\nkey = df[['Player Load Per Minute', 'Session Total Jumps', 'Explosive Efforts', 'Total Player Load']]\nplt.figure(figsize=(10, 6))\n\n#Plotting distribution of Player Load Per Minute\nsns.histplot(df['Player Load Per Minute'], bins=30, kde=True)\nplt.title('Distribution of Player Load Per Minute')\n\nplt.figure(figsize=(10, 6))\n\n# correlation with player load and position\nsns.histplot(df, x=\"Player Load Per Minute\", hue=\"Position\", element=\"step\", common_norm=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.4 Examine Correlations (if relevant)\n\nInterpret findings: what variables appear related?\n\n\n#Use correlation matrices, scatterplots, or other techniques to assess relationships between numerical variables.\n\n#correlation matrix\n\n#creating correlation based on key variables\ncorr = key.corr()\nplt.figure(figsize=(10, 6))\n#plotting heatmap to understand correlation\n#seems that tpl and explosive efforts are highly correlated\n\nplt.figure(figsize=(10, 6))\nsns.regplot(x='Total Player Load', y='Explosive Efforts', data=key, scatter_kws={'color': 'darkblue'}, line_kws={'color': 'red'})\n#seems to be a linear relationship, which makes sense as more effort in explosive efforts would also increase total player load\n\n&lt;Figure size 960x576 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n3.1.5 Explore Relationships (if relevant)\n\nDig into potential causal or descriptive relationships\n\n\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Total Player Load\", data=df)\nplt.title(\"Player Loads by Position\")\nplt.show()\n\n\n\n\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Explosive Efforts\", data=df)\nplt.title(\"Explosive Efforts by Position\")\nplt.show()\n\nplot = sns.FacetGrid(df, col=\"Position\", col_wrap=3, sharex=True, sharey=True)\nplot.map(plt.hist, \"Total Player Load\", bins=30, color=\"lightblue\", edgecolor=\"black\")\nplot.fig.suptitle(\"Histogram of Total Player Load by Position\", y=1.02)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#important-variables-within-this-dataset",
    "href": "eda.html#important-variables-within-this-dataset",
    "title": "2  Exploratory Data Analysis",
    "section": "",
    "text": "Total Player Load: Total physical effort during a session. This is important for our analysis to see how much work the athlete is doing overall.\nPlayer Load Per Minute: Effort per minute (intensity). This is important for our analysis to see the intensity/effort players are putting in. Higher pl per minute means they are most likely sprinting/exerting lots of energy which may take longer recovery.\nExplosive Efforts: Number of high-intensity movements. This is important because high intensity movements can cause strain on muscles leading to potential injuries.\nSession Total Jump: Total jumps in a session. This is important because positions that jump a lot may need more recovery due to the strain this puts on tendons. Especially since jumps are very frequent in basketball.\nSession Jumps Per Minute: Jumps per minute (jump intensity). This can identify positions that may be at risk for knee injury if they have a very high rate of jumps per minutes.\nTotal IMA: Total number of movements (all intensities). This is important to analyze all movement and not just high intensity movement.\nIMA/Min: Number of movements per minute. This is important to track endurance by position.\nPosition: This is important for our analysis to compare all of our variables against position.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#cleaning-the-data",
    "href": "eda.html#cleaning-the-data",
    "title": "2  Exploratory Data Analysis",
    "section": "2.2 Cleaning the data",
    "text": "2.2 Cleaning the data\n\n# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport scipy as sp\nfrom datalearning import df",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#descriptive-statistics-distributions",
    "href": "eda.html#descriptive-statistics-distributions",
    "title": "2  Exploratory Data Analysis",
    "section": "2.3 Descriptive Statistics & Distributions",
    "text": "2.3 Descriptive Statistics & Distributions\n\n#Generate summary statistics (mean, median, standard deviation, min/max, quartiles) for numerical variables\nnumeric = df.select_dtypes(include=[np.number])\n\nnumeric = numeric.dropna()  # Drop any rows with missing values\n\n# Create a new dataframe to store summary statistics\nsummary = pd.DataFrame()\n# Calculate summary statistics for each numeric column and add to the dataframe\nfor each in numeric.columns:\n    stats = numeric[each].describe()\n    summary[each] = stats\n\nprint(summary)\n\n       Total Player Load  Player Load Per Minute  Explosive Efforts  \\\ncount         911.000000              911.000000         911.000000   \nmean          148.872053                5.655873          10.508233   \nstd            86.035006                1.713292          15.071248   \nmin             0.000000                0.000000           0.000000   \n25%           102.256000                4.400000           2.000000   \n50%           143.542000                5.400000           6.000000   \n75%           190.236500                6.800000          11.000000   \nmax           534.156000               12.700000         103.000000   \n\n       Session Total Jump  Session Jumps Per Minute    Total IMA     IMA/Min  \\\ncount          911.000000                911.000000   911.000000  911.000000   \nmean           114.470911                  1.386937   824.243688   47.205060   \nstd             50.033823                  0.568696   317.066287   52.545666   \nmin              0.000000                  0.000000     0.000000    0.000000   \n25%             79.500000                  0.970000   621.000000   21.085000   \n50%            108.000000                  1.320000   862.000000   31.370000   \n75%            141.500000                  1.750000  1034.500000   42.675000   \nmax            329.000000                  4.750000  1857.000000  310.430000   \n\n       Period Number  \ncount          911.0  \nmean             1.0  \nstd              0.0  \nmin              1.0  \n25%              1.0  \n50%              1.0  \n75%              1.0  \nmax              1.0  \n\n\n\n#Create visualizations such as histograms, boxplots, or density plots to explore the distribution of key numerical variables.\nnumeric_df = df.select_dtypes(include=['number'])\n\n# Create correlation matrix\nplt.figure(figsize=(12, 8))\ncorr = numeric_df.corr()\nsns.heatmap(corr, cmap='coolwarm', annot=False, linewidths=0.5)\nplt.title('Correlation Matrix')\nplt.show()\n\nplt.figure(figsize=(10, 6))\n#Plotting distribution of Player Load Per Minute\nsns.histplot(df['Player Load Per Minute'], bins=30, kde=True)\nplt.title('Distribution of Player Load Per Minute')\nplt.show()\nplt.figure(figsize=(10, 6))\n\n# correlation with player load and position\nsns.histplot(df, x=\"Player Load Per Minute\", hue=\"Position\", element=\"step\", common_norm=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe correlation matrix shows that Explosive Efforts have a high correlation with Total Player Load, and Total IMA is highly correlated with Session Total Jumps. Knowing which variables have the highest correlation is important for our analysis so we can focus on those relationships and see what we can discover.\nThe histogram comparing Player Load per Minute for each position illustrates how forwards and guards have a significantly higher player load per minute than centers. This is important information we will use to solve our problem statement regarding different positions exerting different player loads. Using this knowledge, we may be able to adapt training and recovery plans so that it is unique to what each position needs.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#examine-correlations",
    "href": "eda.html#examine-correlations",
    "title": "2  Exploratory Data Analysis",
    "section": "2.4 Examine Correlations",
    "text": "2.4 Examine Correlations\n\nInterpret findings: what variables appear related?\n\n\n#Create regression plots to visualize relationships between total player load and explosive efforts \nplt.figure(figsize=(10, 6))\nsns.regplot(x='Total Player Load', y='Explosive Efforts', data=df, scatter_kws={'color': 'darkblue'}, line_kws={'color': 'red'})\nplt.title('Total Player Load vs. Explosive Efforts')\n\nText(0.5, 1.0, 'Total Player Load vs. Explosive Efforts')\n\n\n\n\n\n\n\n\n\n\nThis plot proves what we saw in our correlation matrix, which is that Explosive Efforts and Total Player Load have a positive, strong linear correlation.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#explore-relationships",
    "href": "eda.html#explore-relationships",
    "title": "2  Exploratory Data Analysis",
    "section": "2.5 Explore Relationships",
    "text": "2.5 Explore Relationships\n\nDig into potential causal or descriptive relationships\n\n\n#Create plots between positions and other key variables\n\n#Boxplots\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Total Player Load\", data=df)\nplt.title(\"Player Loads by Position\")\nplt.show()\n\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Explosive Efforts\", data=df)\nplt.title(\"Explosive Efforts by Position\")\nplt.show()\n\n#Histograms\nplot = sns.FacetGrid(df, col=\"Position\", col_wrap=3, sharex=True, sharey=True)\nplot.map(plt.hist, \"Total Player Load\", bins=30, color=\"lightblue\", edgecolor=\"black\")\nplot.fig.suptitle(\"Histogram of Total Player Load by Position\", y=1.02)\nplt.show()\n\nplot = sns.FacetGrid(df, col=\"Position\", col_wrap=3, sharex=True, sharey=True)\nplot.map(plt.hist, \"Player Load Per Minute\", bins=30, color=\"lightblue\", edgecolor=\"black\")\nplot.fig.suptitle(\"Histogram of Player Load per Minute by Position\", y=1.02)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy comparing different variables by position, it is clear that there are some differences in their levels of Explosive Efforts and Total Player Loads, although those variables don’t seem to have too drastic of a difference. The largest difference by position is Player Load per Minute. As seen in the side-by-side histograms, centers have significantly lower player load per minute than forwards and guards. This is crucial information we will utilize to illustrate to strength and conditioning coaches that there may be more productive ways to train and recover depending on the position.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "3  Data Visualizations",
    "section": "",
    "text": "3.1 Visuals\n#line graph of player load per minute \nmonthly_avg = df.groupby(['Month', 'Position'], as_index=False).agg({ #This creates a new dataframe which groups data by month and position and takes the average of each\n    'Player Load Per Minute': 'mean',\n    'Explosive Efforts': 'mean',\n    'Total IMA': 'mean'\n})\n\nfig_load = px.line( #Makes a line graph with 3 lines showing average Player Load Per Minute over time by Position\n    monthly_avg, #Uses the data from the monthly_avg dataframe\n    x='Month', \n    y='Player Load Per Minute', \n    color='Position', #Colors each line by position\n    markers=True, #Adds a marker at each data point\n    title='Trends over time: Player Load Per Minute by Position' #Adds title\n)\n\nfig_load.update_layout(  #Adds labels and makes the graph interactive\n    xaxis_title='Month', \n    yaxis_title='Avg Player Load Per Minute',\n    showlegend=False, #Removes legend\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-09-01', '2024-03-30']  # Set desired zoom window\n    ),\n    plot_bgcolor='white', #Sets background color to white\n    paper_bgcolor='white', #Sets background of figure to white\n    yaxis=dict(showgrid=True, gridcolor='lightgray', dtick=0.5) #y axis gridlines and y tick interval\n)\n\n#this adds annotations of the position at the end of each line\nfig_load.update_layout(\n    annotations=[\n        dict(\n            x='2024-03-05',\n            y=5.66,\n            text='Center',\n            showarrow=False,\n            font=dict(size=14, color='blue'),\n            xanchor='left',\n            xshift=5\n        ),\n        dict(\n            x='2024-03-05',\n            y=5.8,\n            text='Forward',\n            showarrow=False,\n            font=dict(size=14, color='red'),\n            xanchor='left',\n            xshift=5\n        ),\n        dict(\n            x='2024-03-05',\n            y=5.71,  # Updated y value for Guard\n            text='Guard',\n            showarrow=False,\n            font=dict(size=14, color='green'),\n            xanchor='left',\n            xshift=5\n        )\n    ]\n)\n\n\nfig_load.show() #Shows plot\n\nfig_load.write_image('player_load_per_minute.png') #Saves plot as PNG file\nThe graph above illustrates how player load per minute has fluctuated throughout the past two seasons, emphasizing the importance of adjusting training and recovery plans throughout the year.\nfig_effort = px.line( #Makes a line graph with 3 lines showing average Explosive Efforts over time by Position\n    monthly_avg, #Uses the new monthly_avg dataset\n    x='Month',\n    y='Explosive Efforts',\n    color='Position', #Each line is a different color which correlates with position\n    markers=True, #Adds markers at each data point\n    title='Trends over time: Explosive Efforts by Position' #Adds title\n)\n\nfig_effort.update_layout(  # Adds labels, makes the graph interactive, and sets background to white\n    xaxis_title='Month', \n    yaxis_title='Avg Explosive Efforts',\n    hovermode='x unified',\n    showlegend=False, #Removes legend\n    xaxis=dict(\n        range=['2023-10-01', '2024-03-30']  # Set desired zoom window\n    ),\n    plot_bgcolor='white', #Sets background color to white\n    paper_bgcolor='white', #sets background of figure to white\n    yaxis=dict(\n        showgrid=True, \n        gridcolor='lightgray',\n        tickmode='linear',\n        dtick=1,  # Set y-axis ticks at intervals of 1\n        range=[5, 8.5]  # Set y-axis range \n    )\n)\n\n#this adds annotations of the position at the end of each line\nfig_effort.update_layout(\n    annotations=[\n        dict(\n            x='2024-03-05',\n            y=7.05,\n            text='Center',\n            showarrow=False,\n            font=dict(size=14, color='blue'),\n            xanchor='left',\n            xshift=5\n        ),\n        dict(\n            x='2024-03-05',\n            y=6.65,\n            text='Forward',\n            showarrow=False,\n            font=dict(size=14, color='red'),\n            xanchor='left',\n            xshift=5\n        ),\n        dict(\n            x='2024-03-05',\n            y=8.3,\n            text='Guard',\n            showarrow=False,\n            font=dict(size=14, color='green'),\n            xanchor='left',\n            xshift=5\n        )\n    ]\n)\n\n\nfig_effort.show() #Displays plot\n\nfig_effort.write_image('effort.png') #Saves plot as PNG file\nThe graph above illustrates how Explosive Efforts by position decreased initially, then increased significantly for each position for the majority of the season.\nfig_ima = px.line( #Makes a line graph with 3 lines showing average Total IMA over time by Position\n    monthly_avg, #Uses the dataframe monthly_avg\n    x='Month',\n    y='Total IMA',\n    color='Position', #Colors each line by position\n    markers=True, #Adds markers to each data point\n    title='Trends over time: Total IMA by Position' #Adds graph title\n)\n\nfig_ima.update_layout( #Adds labels and makes the graph interactive\n    xaxis_title='Month',\n    yaxis_title='Avg Total IMA',\n    showlegend=False, #Removes legend\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-10-01', '2024-03-30']  # Set desired zoom window\n    ),\n    plot_bgcolor='white', #Sets background color to white\n    paper_bgcolor='white', #Sets background of figure to white\n    yaxis=dict(showgrid=True, gridcolor='lightgray',  dtick=200) #y axis gridlines, and sets tick interval\n)\n\n#this adds annotations of the position at the end of each line\nfig_ima.update_layout(\n    annotations=[\n        dict(\n            x='2024-03-05',\n            y=840,\n            text='Center',\n            showarrow=False,\n            font=dict(size=14, color='blue'),\n            xanchor='left',\n            xshift=5\n        ),\n        dict(\n            x='2024-03-05',\n            y=880,\n            text='Forward',\n            showarrow=False,\n            font=dict(size=14, color='red'),\n            xanchor='left',\n            xshift=5\n        ),\n        dict(\n            x='2024-03-05',\n            y=790,  # Updated y value for Guard\n            text='Guard',\n            showarrow=False,\n            font=dict(size=14, color='green'),\n            xanchor='left',\n            xshift=5\n        )\n    ]\n)\n\n\n\nfig_ima.show() #Displays plot\n\nfig_ima.write_image('ima.png') #Saves plot as PNG file\nAs seen in the graph above, Total IMA has decreased for the majority of the past two seasons, with little variability between positions.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualizations</span>"
    ]
  },
  {
    "objectID": "dataviz.html#data-visualizations",
    "href": "dataviz.html#data-visualizations",
    "title": "4  Data Visualizations",
    "section": "",
    "text": "4.1.1 Line graphs\n\n#line graph of player load per minute \nmonthly_avg = df.groupby(['Month', 'Position'], as_index=False).agg({ #This creates a new dataframe which groups data by month and position and takes the average of each\n    'Player Load Per Minute': 'mean',\n    'Explosive Efforts': 'mean',\n    'Total IMA': 'mean'\n})\n\nfig_load = px.line( #Makes a line graph with 3 lines showing average Player Load Per Minute over time by Position\n    monthly_avg, #Uses the data from the monthly_avg dataframe\n    x='Month', \n    y='Player Load Per Minute', \n    color='Position', #Colors each line by position\n    markers=True, #Adds a marker at each data point\n    title='Monthly Average: Player Load Per Minute by Position' #Adds title\n)\n\nfig_load.update_layout(  #Adds labels and makes the graph interactive\n    xaxis_title='Month', \n    yaxis_title='Avg Player Load Per Minute',\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-09-01', '2024-03-30']  # Set desired zoom window\n    )\n)\n\nfig_load.show() #Shows plot\n\n        \n        \n        \n\n\n                            \n                                            \n\n\nThe graph above illustrates how player load per minute has fluctuated throughout the past two seasons, emphasizing the importance of adjusting training and recovery plans throughout the year.\n\nfig_effort = px.line( #Makes a line graph with 3 lines showing average Expolosive Efforts over time by Position\n    monthly_avg, #Uses the new monthly_avg dataset\n    x='Month',\n    y='Explosive Efforts',\n    color='Position', #Each line is a different color which correlates with position\n    markers=True, #Adds markers at each data point\n    title='Monthly Average: Explosive Efforts by Position' #Adds title\n)\n\nfig_effort.update_layout(  #Adds labels and makes the graph interactive\n    xaxis_title='Month', \n    yaxis_title='Avg Explosive Efforts',\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-10-01', '2024-03-30']  # Set desired zoom window\n    )\n)\n\nfig_effort.show() #Displays plot\n\n                            \n                                            \n\n\nThe graph above illustrates how Explosive Efforts by position decreased initially, then increased significantly for each position for the majority of the rest of the season.\n\nfig_effort = px.line( #Makes a line graph with 3 lines showing average Total IMA over time by Position\n    monthly_avg, #Uses the dataframe monthly_avg\n    x='Month',\n    y='Total IMA',\n    color='Position', #Colors each line by position\n    markers=True, #Adds markers to each data point\n    title='Monthly Average: Total IMA by Position' #Adds graph title\n)\n\nfig_effort.update_layout( #Adds labels and makes the graph interactive\n    xaxis_title='Month',\n    yaxis_title='Avg Total IMA',\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-10-01', '2024-03-30']  # Set desired zoom window\n    )\n)\n\nfig_effort.show() #Displays plot\n\n                            \n                                            \n\n\nAs seen in the graph above, Total IMA has decreased for the majority of the past two seasons, with little variability between positions.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualizations</span>"
    ]
  },
  {
    "objectID": "dataviz.html#scatterplot-of-total-player-load-vs-explosive-efforts-by-position",
    "href": "dataviz.html#scatterplot-of-total-player-load-vs-explosive-efforts-by-position",
    "title": "4  import libraries",
    "section": "5.2 Scatterplot of Total Player Load vs Explosive Efforts by Position",
    "text": "5.2 Scatterplot of Total Player Load vs Explosive Efforts by Position\n\n# Interactive scatter plot of Total Player Load vs Explosive Efforts by Position\n\n#scatter plot w/ plotly\nfig = px.scatter(df, \n                 x=\"Total Player Load\", \n                 y=\"Explosive Efforts\", \n                 #coloring by position\n                 color=\"Position\", \n                 # reducing the excess info on tool tip\n                 hover_data={\"Total Player Load\": True, \"Explosive Efforts\": True, \"Position\": False}, \n                 #create trendline using ordinary least squares\n                 trendline=\"ols\",\n                 #create separate graphs for each position\n                 facet_col='Position',\n)\n\n# add gridlines as well as reduce heigh of graph to remove excess space\nfig.update_yaxes(range=[0, 80], showgrid=True, gridcolor='lightgray') \nfig.update_xaxes(showgrid=True, gridcolor='lightgray')  \n\n#remove individual position tile annotations for cleanliness\nfor annotation in fig.layout.annotations:\n    if annotation.text.startswith(\"Position=\"):\n        annotation.text = annotation.text.replace(\"Position=\", \"\")\n\n# cleaning up the graph\nfig.update_layout(\n    #creating title\n    title=\"Total Player Load vs Explosive Efforts by Position\",\n    #x axis title and grid color\n    xaxis=dict(\n        title=\"Total Player Load\",\n        showgrid=True,\n        gridcolor='lightgray'\n    ),\n    #y axis title and grid color\n    yaxis=dict(\n        title=\"Explosive Efforts\",\n        showgrid=True,\n        gridcolor='lightgray',\n    ),\n    #remove background color, set font, and remove legend\n    plot_bgcolor='white',\n    font_family='Georgia',\n    showlegend=False,\n    #add margin spacing\n    margin=dict(t=55, b=50, l=50, r=50)\n)\n\n#remove individual x axis titles\nfig.update_xaxes(title_text=None)\n\n#adding overall x axist title\nfig.add_annotation(\n    text=\"Total Player Load\",\n    xref=\"paper\", yref=\"paper\",\n    x=0.5, y=-0.2,\n    showarrow=False,\n    font=dict(family=\"Georgia\", size=14, color=\"black\"),\n    align=\"center\",\n)\n\n\nfig.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>import libraries</span>"
    ]
  },
  {
    "objectID": "dataviz.html#histogram-of-total-ima-by-position",
    "href": "dataviz.html#histogram-of-total-ima-by-position",
    "title": "4  import libraries",
    "section": "5.1 Histogram of Total IMA by Position",
    "text": "5.1 Histogram of Total IMA by Position\n\n# add data\nsns.histplot(df[df['Position'] == 'Guard'], x=\"Total IMA\", element=\"step\", common_norm=False, kde=True, bins=25, zorder=2, color='#4895ef', label='Guard')\nsns.histplot(df[df['Position'] == 'Forward'], x=\"Total IMA\", element=\"step\", common_norm=False, kde=True, bins=25, zorder=2, color='#427AA1', label='Forward')\nsns.histplot(df[df['Position'] == 'Center'], x=\"Total IMA\", element=\"step\", common_norm=False, kde=True, bins=25, zorder=2, color='#064789', label='Center')\n\n# Making it look readable\nplt.title(\"Total IMA by Position\", font='Georgia', fontsize=14, fontweight='bold')\nplt.legend(loc='upper right', fontsize=10, title_fontsize=12, frameon=False)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.ylabel(\"\")\nplt.tick_params(axis='x', which='both', length=0)\nplt.tick_params(axis='y', which='both', length=0)\nplt.gca().tick_params(axis='y', colors='gray')\nplt.gca().tick_params(axis='x', colors='gray')\nplt.grid(True, which='major', color='lightgray', linestyle=':', zorder=0)\nplt.ylabel(\"Total IMA\", color='gray')\nplt.xlabel(\"\", color='gray')\n\n# Show the plot\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>import libraries</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "Variable Name\nData Type\nDescription\n\n\n\n\nTotal Player Load\nfloat64\nTotal physical effort during a session\n\n\nPlayer Load Per Minute\nfloat64\nEffort per minute (intensity)\n\n\nExplosive Efforts\nint64\nNumber of high-intensity movements\n\n\nSession Total Jump\nfloat64\nTotal jumps in a session\n\n\nSession Jumps Per Minute\nfloat64\nJumps per minute (jump intensity)\n\n\nTotal IMA\nfloat64\nTotal number of movements (all intensities)\n\n\nIMA/Min\nfloat64\nNumber of movements per minute\n\n\nDate\ndatetime64\nDate the session took place\n\n\nMonth\ndatetime64\nMonth of combined session dates (1-12)\n\n\nPosition\nobject\nPlayer’s on-court role (Guard, Forward, Center)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UVA Men’s Basketball: Performance & Availability Insights",
    "section": "",
    "text": "Report",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#title-uhhh",
    "href": "index.html#title-uhhh",
    "title": "DS2023 Catapult Group 2 Final Project",
    "section": "",
    "text": "Michael Carlson, Kieran Perdue, Grace Pitts, and Alka Link",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "datalearning.html",
    "href": "datalearning.html",
    "title": "1  Data Cleaning",
    "section": "",
    "text": "# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport scipy as sp\n\nWe began by loading in the catapult data from both seasons and merging the two so that we can analyze trends and patterns across both seasons together, rather than analyzing them separate. It is important to note that this is simulated data, due to privacy reasons preventing us from using players actual data. The simulated data is still highly useful and allows us to draw meaningful conclusions.\n\n# load data\nc1 = pd.read_csv('catapult season 1.csv')\nc2 = pd.read_csv('catapult season 2.csv')\n# merge the two seasons using concat ignoring their individual indexes\ndf = pd.concat([c1, c2], ignore_index=True)\n\nWe dropped duplicates to remove any repeated entries which may skew the analysis. Duplicate rows sometimes occur due to data entry errors, or merging issues, which may occur in our dataset since we merged the two. By dropping duplicates, we know that each data entry is unique.\n\n#check for duplicates\nduplicates = df.duplicated()\nprint(f\"Number of duplicates: {duplicates.sum()}\")\n#drop duplicates\ndf = df.drop_duplicates()\n\nNumber of duplicates: 0\n\n\nWe decided to only keep these key features because they represent the metrics we believed would be most relevant to our analysis and produce the most interesting findings. These variables provide meaningful insights into player workload, intensity, and performance. We believe that focusing on these metrics will help us tell the most accurate and compelling story about athlete training and recovery and allow us to draw clearer conclusions.\n\n#list of key variables that will be used\nkey_vars = [\n    'Total Player Load', 'Player Load Per Minute', 'Explosive Efforts', 'Session Total Jump', 'Session Jumps Per Minute', 'Total IMA', 'IMA/Min', 'Position', 'Date'\n]\n#setting dataframe to only include key variables\ndf = df[key_vars]\n\n# converting date feature to datetime format so it can be used as time\ndf['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%y', errors='coerce')\n# Creating a month column based on the date column\ndf['Month'] = df['Date'].dt.to_period('M').dt.to_timestamp()\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 29442 entries, 0 to 29441\nData columns (total 10 columns):\n #   Column                    Non-Null Count  Dtype         \n---  ------                    --------------  -----         \n 0   Total Player Load         29442 non-null  float64       \n 1   Player Load Per Minute    29442 non-null  float64       \n 2   Explosive Efforts         29442 non-null  int64         \n 3   Session Total Jump        3235 non-null   float64       \n 4   Session Jumps Per Minute  3235 non-null   float64       \n 5   Total IMA                 3235 non-null   float64       \n 6   IMA/Min                   911 non-null    float64       \n 7   Position                  29442 non-null  object        \n 8   Date                      29442 non-null  datetime64[ns]\n 9   Month                     29442 non-null  datetime64[ns]\ndtypes: datetime64[ns](2), float64(6), int64(1), object(1)\nmemory usage: 2.2+ MB\n\n\nWe created a new column for months to allow us to analyze trends over time without having to get overwhelming amounts of data by day.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "index.html#report",
    "href": "index.html#report",
    "title": "DS2023 Catapult Group 2 Final Project",
    "section": "",
    "text": "Michael Carlson, Kieran Perdue, Grace Pitts, and Alka Link",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "dataviz.html#line-graphs",
    "href": "dataviz.html#line-graphs",
    "title": "4  Initial Graphs (Group)",
    "section": "4.2 Line graphs",
    "text": "4.2 Line graphs\n\n#line graph of player load per minute \nmonthly_avg = df.groupby(['Month', 'Position'], as_index=False).agg({\n    'Player Load Per Minute': 'mean',\n    'Explosive Efforts': 'mean',\n    'Total IMA': 'mean'\n})\n\nfig_load = px.line(\n    monthly_avg,\n    x='Month',\n    y='Player Load Per Minute',\n    color='Position',\n    markers=True,\n    title='Monthly Average: Player Load Per Minute by Position'\n)\n\nfig_load.update_layout(\n    xaxis_title='Month',\n    yaxis_title='Avg Player Load Per Minute',\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-09-01', '2024-03-30']  # Set desired zoom window\n    )\n)\n\nfig_load.show()\n\n                            \n                                            \n\n\n\nfig_effort = px.line(\n    monthly_avg,\n    x='Month',\n    y='Explosive Efforts',\n    color='Position',\n    markers=True,\n    title='Monthly Average: Explosive Efforts by Position'\n)\n\nfig_effort.update_layout(\n    xaxis_title='Month',\n    yaxis_title='Avg Explosive Efforts',\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-10-01', '2024-03-30']  # Set desired zoom window\n    )\n)\n\nfig_effort.show()\n\n                            \n                                            \n\n\n\nfig_effort = px.line(\n    monthly_avg,\n    x='Month',\n    y='Total IMA',\n    color='Position',\n    markers=True,\n    title='Monthly Average: Total IMA by Position'\n)\n\nfig_effort.update_layout(\n    xaxis_title='Month',\n    yaxis_title='Avg Total IMA',\n    hovermode='x unified',\n     xaxis=dict(\n        range=['2023-10-01', '2024-03-30']  # Set desired zoom window\n    )\n)\n\nfig_effort.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Initial Graphs (Group)</span>"
    ]
  },
  {
    "objectID": "index.html#prepared-for",
    "href": "index.html#prepared-for",
    "title": "UVA Men’s Basketball: Performance & Availability Insights",
    "section": "Prepared for",
    "text": "Prepared for\nThe Audience: The strength and conditioning staff of the UVA Mens Basketball Team.",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "UVA Men’s Basketball: Performance & Availability Insights",
    "section": "Problem Statement",
    "text": "Problem Statement\nBackground: In collegiate basketball, a grueling season of practices and games takes a toll on players’ bodies. As the season reaches playoffs, players are expected to perform at their peak, but these demands are a catalyst for injury and exhaustion. These injuries and lack of proper recovery can lead to poor individual performance and ultimately impact the team’s success. For teams, to progress in the posteason and make it through March Madness, it is crucial to ensure that there are optimal training and recovery plans in place for each stage of the season.\nSignificance: Postseason and NCAA tournament play is the most important time for collegiate teams. Results impact recruiting, funding, and overall success of the program. On the individual level, players are able to showcase their skills and abilities on the largest collegiate stage. This calls for a need to ensure that teams can perform at their best at the end of the season.\nProblem Statement: Player efforts and demands on their bodies change as the season progresses. To ensure availability in postseason play, how can we look to optimize training and recovery to best prepare players for postseason critical moments?",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "UVA Men’s Basketball: Performance & Availability Insights",
    "section": "Analysis",
    "text": "Analysis\nCatapult tracking data from practices and games reveals an important, actionable trend when analyzed across the course of the season. Presumably in an effort to limit player fatigue, player load per minute steadily declines over time, indicating practices decrease in intensity as the season progresses. However, despite this decrease in intensity, we observed a clear rise in explosive efforts toward the end of the season.\n\n\n\nPlayer Load per Minute\n\n\nTo determine whether this trend was isolated to specific types of players, we stratified the data by position group. Despite finding differences in volume of explosive efforts, we found the same trend for all three position groups; explosive efforts increased late in the season even as total load decreased. This indicates a broader shift in the physical demands placed on players as games grow more competitive and winning becomes increasingly important.\n\n\n\nExplosive Effort\n\n\nThis is a surprising contrast because the correlation between explosive efforts and player load per minute is strongly positive. This contrast gives insight into a potentially impactful in season training change. Players’ rates of explosive effort increase with rising in-game stakes, but overall have lower per minute exertion because of lower-intensity practice as the season progresses. While load management remains undoubtedly crucial for maintaining high player performance at the end of the season, this unique situation raises the question of whether these season long trends put players’ bodies in situations they are not accustomed to, and therefore not optimized for. Exposing players to more simulated environments, like this late season reality, could help physically prepare them for the demands of the postseason.\n\n\n\nTotal IMA",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "UVA Men’s Basketball: Performance & Availability Insights",
    "section": "Conclusion",
    "text": "Conclusion\nTo address this, we recommend in-season (and/or preseason which we have no data for) training that emphasizes explosive capacity without increasing intensity by load per minute. Obviously, this is counterintuitive as more explosive efforts inherently will lead to a higher load per minute, but maximizing explosive efforts under some load per minute threshold could provide a beneficial form of specialized training that prepares players for end of season needs. Short, targeted sessions focused on speed, power, and agility can maintain explosiveness while keeping overall physical stress low. Something that may require further digging is for how long and when to implement these training sessions. Presumably, it would have to be stretches of at least several days at a time to best replicate the idea of build-up. They could be potentially effective for the college basketball season in December when the game schedule is sparse so a more built out training plan is possible. Regardless of exact implementation, training that best simulates the specific requirements that arise when stakes are the highest could provide beneficial results for teams looking for postseason success.",
    "crumbs": [
      "Report"
    ]
  }
]